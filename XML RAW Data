USE [ShippingBill_Dispatch]
GO
/****** Object:  StoredProcedure [dbo].[usp_ShippingBill_GetAllPDF_Details_AWBNumber]    Script Date: 10/4/2019 3:59:32 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER procedure [dbo].[usp_ShippingBill_GetAllPDF_Details_AWBNumber](
@AWBNumber nvarchar(100)='', @DtlSeq varchar(100), @date nvarchar(100),@Result nvarchar(max) =null output ,@TemplateType int OUTPUT        )          

as          

begin          

          

 SET NOCOUNT ON;                

  select           
	top 1
   'Details' as 'DETAILS OF CSB'          

             

   ---- Persnoal Details          

   ,ISNULL(a.f_CSB_Number,'') as CSB_Number          

   ,ISNULL(a.f_Filling_Date,'') as Filling_Date   

   

   ,'Details' as 'DETAILS OF AUTHORIZED COURIER'               



   ,ISNULL(a.f_Courier_Registration_Number,'') as Courier_Registration_Number          

   --,ISNULL(convert(varchar(12), reg.f_Dob,103),'') as Date_Of_Birth           

   ,ISNULL(a.f_Courier_Name,'') as Courier_Name          

   ,ISNULL(a. f_Address_1,'') as  f_Address_1          

   ,ISNULL(a.f_Address_2,'') as Address_2          

   ,ISNULL(a.f_City,'') as City          

   ,ISNULL(a.f_Postal_Zip_Code,'') as Postal_Zip_Code          

   ,ISNULL(a.f_State,'') as [State]

   ,ISNULL(a.f_Custom_Station_Name,'') as Custom_Station_Name

         

   ,'Details' as 'AIRLINE AND FLIGHT NUMBER DETAILS'            

   ,ISNULL(a.f_Airlines,'') as Airlines

   ,ISNULL(a.f_Flight_Number,'') as Flight_Number

   ,ISNULL(a.f_Port_of_Loading,'') as Port_of_Loading          

   ,ISNULL(a.f_Date_of_Departure,'') as Date_of_Departure

                    

   ,'Details' as 'DETAILS OF HAWBS EXPORTED'            



   ,ISNULL(a.f_HAWB_Number,'') as HAWB_Number

   ,ISNULL(a.f_Number_of_Packages_Pieces_Bags_ULD,'') as Number_of_Packages_Pieces_Bags_ULD

   ,ISNULL(a.f_Declared_Weight_in_Kgs,'') as Declared_Weight_in_Kgs

   ,ISNULL(a.f_Airport_of_Destination,'') as Airport_of_Destination

   ,ISNULL(a.f_Import_Export_Code_IEC,'') as Import_Export_Code_IEC

   ,ISNULL(a.f_IEC_Branch_Code,'') as IEC_Branch_Code

   ,ISNULL(a.f_Invoice_Term,'') as Invoice_Term

   ,ISNULL(a.f_MHBS_No,'') as MHBS_No

   ,ISNULL(a.f_Export_Using_eCommerce,'') as Export_Using_eCommerce

   ,ISNULL(a.f_Under_MEIS_Scheme,'') as Under_MEIS_Scheme

   ,ISNULL(a.f_AD_Code,'') as AD_Code

   ,ISNULL(a.f_Status,'') as [Status]

   ,ISNULL(a.f_LEO_DATE,'') as LEO_DATE



   ,'Details' as 'CEM DETAILS'            

   ,ISNULL(a.f_EGM_Number,'') as EGM_Number

   ,ISNULL(a.f_EGM_Date,'') as EGM_Date



   ,'Details' as 'CONSIGNOR AND CONSIGNEE DETAILS'            

   ,ISNULL(a.f_Name_of_the_Consignor,'') as Name_of_the_Consignor

   ,ISNULL(a.f_Address_of_the_Consignor,'') as Address_of_the_Consignor

   ,ISNULL(a.f_Name_of_the_Consignee,'') as Name_of_the_Consignee

   ,ISNULL(a.f_Address_of_the_Consignee,'') as Address_of_the_Consignee



           

 from t_ShippingBill_ReadPdfDetails a with (NOLOCK) 

	--inner join t_ShippingBill_ReadPdf_LineItemDetails b with(NOLOCK) on a.f_HAWB_Number= b.f_HAWB_Number    and a.f_Active=1   

	

             

 where LTRIM(RTRIM(a.f_HAWB_Number)) = LTRIM(RTRIM(@AWBNumber)) and  LTRIM(RTRIM(LOWER(f_PdfDtl_Sequence))) = LTRIM(RTRIM(LOWER(@DtlSeq))) and a.f_Active=1 

       

 FOR XML RAW ('EmpData'), ROOT                 



 

 select @TemplateType = 1;                  

 SET NOCOUNT OFF;                  

end 



public string GETAllDetailsByAWBNumber_LogXML(string AwbNumber, string DtlSeq, string searchDate, ref string Resultset, out int TemplateType)
        {
            try
            {
                return SelectFromXmlReader(Conn, "usp_ShippingBill_GetAllPDF_Details_AWBNumber", new string[] { "@AWBNumber", "@DtlSeq", "@date" }, new object[] { AwbNumber, DtlSeq, searchDate }, ref Resultset, out TemplateType);

            }
            catch (Exception)
            {
                //ExceptionUtility.LogException(ex, ex.Source);
                TemplateType = 0;
                return "";
            }
        }
        
  public string SelectFromXmlReader(string conn, string Procedure, string[] param, object[] value, ref string Resultset, out int TemplateType)
        {
            string s = "";
            SqlConnection con = new SqlConnection(conn);
            con.Open();
            XmlDocument xdoc = new XmlDocument();
            SqlCommand cmd = new SqlCommand(Procedure, con);
            cmd.CommandType = CommandType.StoredProcedure;
            cmd.CommandTimeout = 180;
            try
            {
                for (int i = 0; i < param.Length; i++)
                {
                    cmd.Parameters.AddWithValue(param[i], value[i]);
                }


                //cmd.Parameters.AddWithValue("@Result", SqlDbType.NVarChar).Direction = ParameterDirection.Output;
                cmd.Parameters.AddWithValue("@TemplateType", SqlDbType.Int).Direction = ParameterDirection.Output;
                cmd.ExecuteNonQuery();
                TemplateType = Convert.ToInt32(cmd.Parameters["@TemplateType"].Value.ToString());
                //string myValue = Convert.ToString(cmd.Parameters["@Result"].Value.ToString());

                using (XmlReader reader = cmd.ExecuteXmlReader())
                {
                    while (reader.Read())
                    {
                        s = reader.ReadOuterXml();
                        // return reader.ReadOuterXml();
                    }
                }


                return s;
            }
            catch (Exception)
            {
                //ExceptionUtility.LogException(ex, ex.Source);
                TemplateType = 0;
                return "";
            }
            finally
            {
                con.Close();
                con.Dispose();
                cmd.Dispose();
            }
        }
      
   [WebMethod]
        [ScriptMethod(UseHttpGet = false, ResponseFormat = ResponseFormat.Json)]
        public static string GetEmpMstDataLogXML(string AWBNo, string DtlSeq, string searchDate)
        {
            try
            {
                int TemplateType = 1;
                string XML = ""; string Empdtls = ""; string PanNo = string.Empty;

                UserData user = new UserData();
                string Resultset = "";
                //AppNo = "FQ18D75661";
                XML = user.GETAllDetailsByAWBNumber_LogXML(AWBNo, DtlSeq, searchDate, ref Resultset, out TemplateType);
                if (TemplateType == 1 && XML != "")
                {
                    Empdtls = ConvertXmlToHtmlTemp1(XML);
                }
                return JsonConvert.SerializeObject(new { Empdtls = Empdtls });
            }
            catch (Exception)
            {
                //ExceptionUtility.LogException(ex, ex.Source);
                return JsonConvert.SerializeObject(new { Error = "Some thing Went Wrong please try again." });
            }
        }
        protected static string ConvertXmlToHtmlTemp1(string xml)
        {
            string htmlTable = "";
            StringBuilder html = new StringBuilder();
            StringBuilder htmlhead = new StringBuilder();
            StringBuilder htmlbody = new StringBuilder();
            html.Append("<table width='100%' align='left' " + "class='table xmlTable' style='border:0px solid white;'>");
            try
            {
                System.Xml.Linq.XDocument xDocument = XDocument.Parse(xml);
                System.Xml.Linq.XElement root = xDocument.Root;

                var xmlAttributeCollection = root.Elements().Attributes();
                string Headervalue = "";
                string elename = "";

                DataTable dt = new DataTable();
                dt.Rows.Add();
                foreach (var ele in root.Elements())
                {
                    if (!ele.HasElements)
                    {
                        if (ele.HasAttributes)
                        {
                            IEnumerable<XAttribute> attribs = ele.Attributes();
                            int i = 0;
                            int count = attribs.Count();
                            //htmlhead.Append("<tr>");
                            foreach (XAttribute attrib in attribs)
                            {
                                string colorvalue = "black";
                                if (Convert.ToString(attrib.Value) == "Details")
                                {
                                    Headervalue = (Convert.ToString(attrib.Name)).Replace("_x0020_", " ");
                                }
                                else
                                {
                                    Headervalue = "";
                                }
                                if (Headervalue != "")
                                {
                                    if (i % 2 == 1)
                                    {
                                        htmlhead.Append("<td style='border-top: 0px solid #ddd;'/><td style='border-top: 0px solid #ddd;'/>");
                                    }
                                    //Headervalue = "<tr><td style='width :25%; color:Red;' colspan='4'>" + Headervalue + "</td></tr><tr>";
                                    Headervalue = "<tr><td colspan='4' style='border-top: 0px solid #ddd;'><br/><div  class='page-header' ><h3 style='font-size: 18px;'>" + Headervalue + "</h3></div></td></tr><tr>";
                                    htmlhead.Append(Headervalue);
                                    i = 0;
                                }
                                else
                                {
                                    i++;


                                    //else
                                    {
                                        elename = htmlhead.Append("<td style='width :25%;border-top: 0px solid #ddd; color:" + colorvalue + "' ><b> " + (Convert.ToString(attrib.Name)).Replace("_x0020_", " ").Replace("_", " ") +
                                        ": </b></td>").ToString();

                                        {
                                            string ColumnName = Convert.ToString(attrib.Name).Replace("_x0020_", " ").Replace("_", " ");
                                            string ColumnValue = (((Convert.ToString(attrib.Value) != "" && Convert.ToString(attrib.Value) != null) ? attrib.Value.ToString() : "NA"));
                                            //DataColumn dcolColumn = new DataColumn("Link", typeof(string));

                                            dt.Columns.Add(ColumnName);

                                            dt.AcceptChanges();
                                            //dr[ColumnName] = ColumnValue;

                                            dt.Rows[0][ColumnName] = ColumnValue;
                                            dt.AcceptChanges();

                                            //dt.Columns.Add(Convert.ToString(attrib.Name).Replace("_x0020_", " ").Replace("_", " "),typeof(string));
                                            //dt.AcceptChanges();
                                            //dr[Convert.ToString(attrib.Name).Replace("_x0020_", " ").Replace("_", " ")] = (((Convert.ToString(attrib.Value) != "" && Convert.ToString(attrib.Value) != null) ? attrib.Value.ToString() : "NA"));



                                            elename = htmlhead.Append("<td style='width :25%;border-top: 0px solid #ddd; color: " + colorvalue + "'>" + (((Convert.ToString(attrib.Value) != "" && Convert.ToString(attrib.Value) != null) ? attrib.Value.ToString() : "NA")) + "</td>").ToString();
                                        }
                                    }


                                }
                                // elevalue = htmlbody.Append("<td class='XMLCol'>" + attrib.Value.ToString() + "</td></tr>").ToString();
                                if (i % 2 == 0)
                                {
                                    htmlhead.Append("</tr><tr>");
                                }

                            }
                            htmlhead.Append("<tr><td style='border-top: 0px solid #ddd;'></br></br></td><td style='border-top: 0px solid #ddd;'></br></br></td><td style='border-top: 0px solid #ddd;'></br></br></td><td style='border-top: 0px solid #ddd;'></br></br></td></tr>");
                        }
                    }
                    else
                    {
                    }
                }
                html.Append(elename);
                html.Append("</tr>");
                html.Append("</table>");
                htmlTable = html.ToString();

                return htmlTable;
            }

            catch (Exception)
            {
                //ExceptionUtility.LogException(ex, ex.Source);
                return xml;
            }

        }

